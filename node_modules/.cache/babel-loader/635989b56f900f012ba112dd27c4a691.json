{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    displayPages\n  } = _ref;\n  const start = 0;\n  const end = displayPages === null || displayPages === undefined ? start + TRANSACTIONS_PER_PAGE : displayPages * (start + TRANSACTIONS_PER_PAGE);\n  return {\n    data: data.transactions.slice(start, Math.min(end, data.transactions.length)),\n    displayViewMore: end < data.transactions.length\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  } else if (employeeId == \"All\") {\n    return data.transactions;\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (transaction) {\n    transaction.approved = value;\n    return {\n      success: true\n    };\n  }\n\n  return {\n    success: false\n  };\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","displayPages","start","end","undefined","slice","Math","min","length","displayViewMore","getTransactionsByEmployee","employeeId","Error","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved","success"],"sources":["/project/Ramp-FE-Challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  SuccessResponse,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  displayPages\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  const start = 0\n  const end = (displayPages === null || displayPages === undefined) ? (start + TRANSACTIONS_PER_PAGE) : displayPages * (start + TRANSACTIONS_PER_PAGE)\n\n  return {\n    data: data.transactions.slice(start, Math.min(end, data.transactions.length)),\n    displayViewMore: end < data.transactions.length\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  } else if (employeeId == \"All\") {\n    return data.transactions;\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({\n  transactionId,\n  value,\n}: SetTransactionApprovalParams): SuccessResponse => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n  if (transaction) {\n    transaction.approved = value\n    return { success: true }\n  }\n\n  return { success: false }\n}\n"],"mappings":"AASA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;EAC9D,MAAMC,KAAK,GAAG,CAAd;EACA,MAAMC,GAAG,GAAIF,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAKG,SAA3C,GAAyDF,KAAK,GAAGP,qBAAjE,GAA0FM,YAAY,IAAIC,KAAK,GAAGP,qBAAZ,CAAlH;EAEA,OAAO;IACLC,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBO,KAAlB,CAAwBH,KAAxB,EAA+BI,IAAI,CAACC,GAAL,CAASJ,GAAT,EAAcP,IAAI,CAACE,YAAL,CAAkBU,MAAhC,CAA/B,CADD;IAELC,eAAe,EAAEN,GAAG,GAAGP,IAAI,CAACE,YAAL,CAAkBU;EAFpC,CAAP;AAID,CAVM;AAYP,OAAO,MAAME,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;EACD,CAFD,MAEO,IAAID,UAAU,IAAI,KAAlB,EAAyB;IAC9B,OAAOf,IAAI,CAACE,YAAZ;EACD;;EAED,OAAOF,IAAI,CAACE,YAAL,CAAkBe,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BL,UAAtE,CAAP;AACD,CARM;AAUP,OAAO,MAAMM,sBAAsB,GAAG,SAGe;EAAA,IAHd;IACrCC,aADqC;IAErCC;EAFqC,CAGc;EACnD,MAAML,WAAW,GAAGlB,IAAI,CAACE,YAAL,CAAkBsB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;;EAGA,IAAIJ,WAAJ,EAAiB;IACfA,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB;IACA,OAAO;MAAEI,OAAO,EAAE;IAAX,CAAP;EACD;;EAED,OAAO;IAAEA,OAAO,EAAE;EAAX,CAAP;AACD,CAbM"},"metadata":{},"sourceType":"module"}