{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page,\n    fetchAll\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = fetchAll === null || fetchAll === undefined ? start + TRANSACTIONS_PER_PAGE : fetchAll * (start + TRANSACTIONS_PER_PAGE);\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  } else if (employeeId == \"All\") {\n    return data.transactions;\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (transaction) {\n    transaction.approved = value;\n    return {\n      success: true\n    };\n  }\n\n  return {\n    success: false\n  };\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","fetchAll","Error","start","end","undefined","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved","success"],"sources":["/project/Ramp-FE-Challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  SuccessResponse,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n  fetchAll\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = (fetchAll === null || fetchAll === undefined) ? (start + TRANSACTIONS_PER_PAGE) : fetchAll * (start + TRANSACTIONS_PER_PAGE)\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  } else if (employeeId == \"All\") {\n    return data.transactions;\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({\n  transactionId,\n  value,\n}: SetTransactionApprovalParams): SuccessResponse => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n  if (transaction) {\n    transaction.approved = value\n    return { success: true }\n  }\n\n  return { success: false }\n}\n"],"mappings":"AASA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAGwB;EAAA,IAHvB;IACvCC,IADuC;IAEvCC;EAFuC,CAGuB;;EAC9D,IAAID,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGH,IAAI,GAAGN,qBAArB;EACA,MAAMU,GAAG,GAAIH,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAKI,SAAnC,GAAiDF,KAAK,GAAGT,qBAAzD,GAAkFO,QAAQ,IAAIE,KAAK,GAAGT,qBAAZ,CAAtG;;EAEA,IAAIS,KAAK,GAAGR,IAAI,CAACE,YAAL,CAAkBS,MAA9B,EAAsC;IACpC,MAAM,IAAIJ,KAAJ,CAAW,gBAAeF,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMO,QAAQ,GAAGH,GAAG,GAAGT,IAAI,CAACE,YAAL,CAAkBS,MAAxB,GAAiCN,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLO,QADK;IAELZ,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBW,KAAlB,CAAwBL,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CArBM;AAuBP,OAAO,MAAMK,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIR,KAAJ,CAAU,6BAAV,CAAN;EACD,CAFD,MAEO,IAAIQ,UAAU,IAAI,KAAlB,EAAyB;IAC9B,OAAOf,IAAI,CAACE,YAAZ;EACD;;EAED,OAAOF,IAAI,CAACE,YAAL,CAAkBc,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CARM;AAUP,OAAO,MAAMK,sBAAsB,GAAG,SAGe;EAAA,IAHd;IACrCC,aADqC;IAErCC;EAFqC,CAGc;EACnD,MAAML,WAAW,GAAGjB,IAAI,CAACE,YAAL,CAAkBqB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;;EAGA,IAAIJ,WAAJ,EAAiB;IACfA,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB;IACA,OAAO;MAAEI,OAAO,EAAE;IAAX,CAAP;EACD;;EAED,OAAO;IAAEA,OAAO,EAAE;EAAX,CAAP;AACD,CAbM"},"metadata":{},"sourceType":"module"}