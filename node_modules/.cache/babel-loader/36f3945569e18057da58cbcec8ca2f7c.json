{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    customFetch\n  } = useCustomFetch();\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(displayPages => wrappedRequest(async () => {\n    const response = await customFetch(\"paginatedTransactions\", {\n      displayPages: displayPages\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: response.data\n      };\n    });\n  }), [customFetch, paginatedTransactions, wrappedRequest]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"PjbFOwKzvysUNtCSvb47PgSzUiU=\", false, function () {\n  return [useCustomFetch, useWrappedRequest];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useWrappedRequest","usePaginatedTransactions","customFetch","loading","wrappedRequest","paginatedTransactions","setPaginatedTransactions","fetchAll","displayPages","response","previousResponse","data","invalidateData"],"sources":["/project/Ramp-FE-Challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { customFetch } = useCustomFetch()\n  const { loading, wrappedRequest } = useWrappedRequest()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(\n    (displayPages?: number | null) =>\n      wrappedRequest(async () => {\n        const response = await customFetch<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n          \"paginatedTransactions\",\n          {\n            displayPages: displayPages\n          }\n        )\n\n        setPaginatedTransactions((previousResponse) => {\n          if (previousResponse === null) {\n            return response\n          }\n\n          return { data: response.data }\n        })\n      }),\n    [customFetch, paginatedTransactions, wrappedRequest]\n  )\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC;EAAF,IAAkBH,cAAc,EAAtC;EACA,MAAM;IAAEI,OAAF;IAAWC;EAAX,IAA8BJ,iBAAiB,EAArD;EACA,MAAM,CAACK,qBAAD,EAAwBC,wBAAxB,IAAoDR,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMS,QAAQ,GAAGV,WAAW,CACzBW,YAAD,IACEJ,cAAc,CAAC,YAAY;IACzB,MAAMK,QAAQ,GAAG,MAAMP,WAAW,CAChC,uBADgC,EAEhC;MACEM,YAAY,EAAEA;IADhB,CAFgC,CAAlC;IAOAF,wBAAwB,CAAEI,gBAAD,IAAsB;MAC7C,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOD,QAAP;MACD;;MAED,OAAO;QAAEE,IAAI,EAAEF,QAAQ,CAACE;MAAjB,CAAP;IACD,CANuB,CAAxB;EAOD,CAfa,CAFU,EAkB1B,CAACT,WAAD,EAAcG,qBAAd,EAAqCD,cAArC,CAlB0B,CAA5B;EAqBA,MAAMQ,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCS,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEK,IAAI,EAAEN,qBAAR;IAA+BF,OAA/B;IAAwCI,QAAxC;IAAkDK;EAAlD,CAAP;AACD;;GAjCeX,wB;UACUF,c,EACYC,iB"},"metadata":{},"sourceType":"module"}