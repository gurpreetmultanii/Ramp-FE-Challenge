{"ast":null,"code":"var _jsxFileName = \"/project/Ramp-FE-Challenge/src/components/TransactionPane/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { fakeFetch } from \"../../utils/fetch\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n\n  let {\n    transaction\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved);\n  const setTransactionApproval = useCallback(newValue => {\n    fakeFetch(\"setTransactionApproval\", {\n      transactionId: transaction.id\n    });\n    setApproved(newValue);\n  }, [transaction.id]);\n  let count = 1;\n\n  if (count == 1) {\n    count += 1;\n    setTransactionApproval(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      onChange: setTransactionApproval\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionPane, \"0gp8LpKSct6/88+Nl0/2DfzehiQ=\");\n\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useCallback","useState","fakeFetch","InputCheckbox","TransactionPane","transaction","approved","setApproved","setTransactionApproval","newValue","transactionId","id","count","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","Intl","NumberFormat","style","currency"],"sources":["/project/Ramp-FE-Challenge/src/components/TransactionPane/index.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { fakeFetch } from \"../../utils/fetch\"\nimport { SuccessResponse } from \"../../utils/types\"\nimport { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\n\nexport const TransactionPane: TransactionPaneComponent = ({ transaction }) => {\n  const [approved, setApproved] = useState(transaction.approved)\n\n  const setTransactionApproval = useCallback(\n    (newValue: boolean) => {\n      fakeFetch<SuccessResponse>(\"setTransactionApproval\", {\n        transactionId: transaction.id,\n      })\n      setApproved(newValue)\n    },\n    [transaction.id]\n  )\n\n  let count = 1;\n  if (count == 1) {\n    count += 1;\n    setTransactionApproval(false);\n  }\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox id={transaction.id} checked={approved} onChange={setTransactionApproval} />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,SAASC,aAAT,QAA8B,kBAA9B;;AAGA,OAAO,MAAMC,eAAyC,GAAG,QAAqB;EAAA;;EAAA,IAApB;IAAEC;EAAF,CAAoB;EAC5E,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAACI,WAAW,CAACC,QAAb,CAAxC;EAEA,MAAME,sBAAsB,GAAGR,WAAW,CACvCS,QAAD,IAAuB;IACrBP,SAAS,CAAkB,wBAAlB,EAA4C;MACnDQ,aAAa,EAAEL,WAAW,CAACM;IADwB,CAA5C,CAAT;IAGAJ,WAAW,CAACE,QAAD,CAAX;EACD,CANuC,EAOxC,CAACJ,WAAW,CAACM,EAAb,CAPwC,CAA1C;EAUA,IAAIC,KAAK,GAAG,CAAZ;;EACA,IAAIA,KAAK,IAAI,CAAb,EAAgB;IACdA,KAAK,IAAI,CAAT;IACAJ,sBAAsB,CAAC,KAAD,CAAtB;EACD;;EACD,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBH,WAAW,CAACQ,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBV,WAAW,CAACW,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGX,WAAW,CAACY,QAAZ,CAAqBC,SADxB,OACoCb,WAAW,CAACY,QAAZ,CAAqBE,QADzD,SACsEd,WAAW,CAACe,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MAAe,EAAE,EAAEf,WAAW,CAACM,EAA/B;MAAmC,OAAO,EAAEL,QAA5C;MAAsD,QAAQ,EAAEE;IAAhE;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA9BM;;GAAMJ,e;;KAAAA,e;AAgCb,MAAMU,cAAc,GAAG,IAAIO,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}